/**
 * @fileoverview Firestore Security Rules for LearnFast application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has a dedicated data tree under `/users/{userId}`, and only the authenticated user with a matching `uid` can read or write to that tree.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}` to enforce ownership. This includes study packs, flashcards, quizzes, questions, answers, and review sessions.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied. Only the authenticated user can access their own data tree.
 * - No data validation is performed beyond checking document ownership to allow for rapid schema iteration during prototyping.
 * - Read-only collections are not used in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to user profiles, ensuring only the user can read and write their own data.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their profile if authenticated as 'user123'.
     * @deny (create) User 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) User 'user456' cannot read, update, or delete the profile of 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to study packs, ensuring only the owning user can manage their study packs.
     * @path /users/{userId}/studyPacks/{studyPackId}
     * @allow (create) User 'user123' can create a study pack under their profile.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their study pack.
     * @deny (create) User 'user456' cannot create a study pack under 'user123''s profile.
     * @deny (get, update, delete) User 'user456' cannot access 'user123''s study pack.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/studyPacks/{studyPackId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to flashcards, ensuring only the owning user can manage flashcards within their study packs.
     * @path /users/{userId}/studyPacks/{studyPackId}/flashcards/{flashcardId}
     * @allow (create) User 'user123' can create a flashcard in their study pack.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their flashcard.
     * @deny (create) User 'user456' cannot create a flashcard in 'user123''s study pack.
     * @deny (get, update, delete) User 'user456' cannot access 'user123''s flashcard.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/studyPacks/{studyPackId}/flashcards/{flashcardId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to quizzes, ensuring only the owning user can manage quizzes within their study packs.
     * @path /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}
     * @allow (create) User 'user123' can create a quiz in their study pack.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their quiz.
     * @deny (create) User 'user456' cannot create a quiz in 'user123''s study pack.
     * @deny (get, update, delete) User 'user456' cannot access 'user123''s quiz.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to questions, ensuring only the owning user can manage questions within their quizzes.
     * @path /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId}
     * @allow (create) User 'user123' can create a question in their quiz.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their question.
     * @deny (create) User 'user456' cannot create a question in 'user123''s quiz.
     * @deny (get, update, delete) User 'user456' cannot access 'user123''s question.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to answers, ensuring only the owning user can manage answers within their questions.
     * @path /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId}/answers/{answerId}
     * @allow (create) User 'user123' can create an answer in their question.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their answer.
     * @deny (create) User 'user456' cannot create an answer in 'user123''s question.
     * @deny (get, update, delete) User 'user456' cannot access 'user123''s answer.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId}/answers/{answerId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to review sessions, ensuring only the owning user can manage their review sessions.
     * @path /users/{userId}/reviewSessions/{reviewSessionId}
     * @allow (create) User 'user123' can create a review session under their profile.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their review session.
     * @deny (create) User 'user456' cannot create a review session under 'user123''s profile.
     * @deny (get, update, delete) User 'user456' cannot access 'user123''s review session.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/reviewSessions/{reviewSessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}