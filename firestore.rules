/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model. Only the authenticated user who owns a given document can read or write to it.
 * @data-structure All data is nested under /users/{userId}, ensuring that all content is scoped to a specific user.
 * @key-security-decisions This ruleset explicitly denies listing of the /users collection for privacy. All other listing is allowed for a user's own data. Write access is strictly controlled by user ownership and validated user ID on create.
 * @denormalization-for-authorization The userId is present in the path for all subcollections to avoid needing to duplicate the userId inside each document's data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the root /users collection. Only allows creation of a user document with a validated ID. Listing all users is disallowed.
     * @path /users/{userId}
     * @allow (create) Allows a user to create their own user document with the ID matching their UID.
     * @deny (get, list, update, delete) Prevents unauthorized access to user data.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures the /users/{userId}/subjects collection, allowing only the owner to manage their subjects.
     * @path /users/{userId}/subjects/{subjectId}
     * @allow (create, get, list, update, delete) Allows the owner of the subject to perform all operations.
     * @deny (create, get, list, update, delete) Denies access to subjects owned by other users.
     * @principle Enforces document ownership for all operations on subject documents.
     */
    match /users/{userId}/subjects/{subjectId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/studyPacks collection, ensuring only the owner can manage their study packs.
     * @path /users/{userId}/studyPacks/{studyPackId}
     * @allow (create, get, list, update, delete) Allows the owner of the study pack to perform all operations.
     * @deny (create, get, list, update, delete) Denies access to study packs owned by other users.
     * @principle Enforces document ownership for all operations on study pack documents.
     */
    match /users/{userId}/studyPacks/{studyPackId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/studyPacks/{studyPackId}/flashcards collection, ensuring only the owner can manage flashcards within their study packs.
     * @path /users/{userId}/studyPacks/{studyPackId}/flashcards/{flashcardId}
     * @allow (create, get, list, update, delete) Allows the owner of the flashcard to perform all operations.
     * @deny (create, get, list, update, delete) Denies access to flashcards owned by other users.
     * @principle Enforces document ownership for all operations on flashcard documents.
     */
    match /users/{userId}/studyPacks/{studyPackId}/flashcards/{flashcardId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/studyPacks/{studyPackId}/quizzes collection, ensuring only the owner can manage quizzes within their study packs.
     * @path /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}
     * @allow (create, get, list, update, delete) Allows the owner of the quiz to perform all operations.
     * @deny (create, get, list, update, delete) Denies access to quizzes owned by other users.
     * @principle Enforces document ownership for all operations on quiz documents.
     */
    match /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions collection, ensuring only the owner can manage questions within their quizzes.
     * @path /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId}
     * @allow (create, get, list, update, delete) Allows the owner of the question to perform all operations.
     * @deny (create, get, list, update, delete) Denies access to questions owned by other users.
     * @principle Enforces document ownership for all operations on question documents.
     */
    match /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId}/answers collection, ensuring only the owner can manage answers within their questions.
     * @path /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId}/answers/{answerId}
     * @allow (create, get, list, update, delete) Allows the owner of the answer to perform all operations.
     * @deny (create, get, list, update, delete) Denies access to answers owned by other users.
     * @principle Enforces document ownership for all operations on answer documents.
     */
    match /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId}/answers/{answerId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/reviewSessions collection, ensuring only the owner can manage their review sessions.
     * @path /users/{userId}/reviewSessions/{reviewSessionId}
     * @allow (create, get, list, update, delete) Allows the owner of the review session to perform all operations.
     * @deny (create, get, list, update, delete) Denies access to review sessions owned by other users.
     * @principle Enforces document ownership for all operations on review session documents.
     */
    match /users/{userId}/reviewSessions/{reviewSessionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}