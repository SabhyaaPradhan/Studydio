/**
 * @fileoverview Firestore Security Rules for LearnFast application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated data tree under /users/{userId},
 * and only the authenticated user can read or write their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a clear hierarchy of ownership. This includes subjects,
 * study packs, flashcards, quizzes, questions, answers, and review sessions.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent potential information disclosure.
 * - All writes are validated against the authenticated user's ID to prevent unauthorized data modification.
 * - Denormalization for Authorization: User IDs are embedded within documents and paths to avoid costly `get()` calls
 *   and enforce ownership efficiently.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create, get, update, delete) if the authenticated user's ID matches the userId.
     * @deny (create, get, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to subjects (collections of study packs) created by a user.
     *              Only the owner can create, read, update, or delete their subjects.
     * @path /users/{userId}/subjects/{subjectId}
     * @allow (create, get, update, delete) if the authenticated user's ID matches the userId.
     * @deny (create, get, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to study packs created by a user.
     *              Only the owner can create, read, update, or delete their study packs.
     * @path /users/{userId}/studyPacks/{studyPackId}
     * @allow (create, get, update, delete) if the authenticated user's ID matches the userId.
     * @deny (create, get, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/studyPacks/{studyPackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to flashcards within a specific study pack.
     *              Only the owner of the study pack can create, read, update, or delete flashcards within it.
     * @path /users/{userId}/studyPacks/{studyPackId}/flashcards/{flashcardId}
     * @allow (create, get, update, delete) if the authenticated user's ID matches the userId.
     * @deny (create, get, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/studyPacks/{studyPackId}/flashcards/{flashcardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to quizzes associated with a study pack.
     *              Only the owner of the study pack can create, read, update, or delete quizzes.
     * @path /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}
     * @allow (create, get, update, delete) if the authenticated user's ID matches the userId.
     * @deny (create, get, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to questions within a specific quiz.
     *              Only the owner of the quiz (and its parent study pack) can create, read, update, or delete questions.
     * @path /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId}
     * @allow (create, get, update, delete) if the authenticated user's ID matches the userId.
     * @deny (create, get, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to answer options for a question.
     *              Only the owner of the question (and its parent quiz and study pack) can create, read, update, or delete answers.
     * @path /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId}/answers/{answerId}
     * @allow (create, get, update, delete) if the authenticated user's ID matches the userId.
     * @deny (create, get, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/studyPacks/{studyPackId}/quizzes/{quizId}/questions/{questionId}/answers/{answerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to review sessions for a user.
     *              Only the user can create, read, update, or delete their own review sessions.
     * @path /users/{userId}/reviewSessions/{reviewSessionId}
     * @allow (create, get, update, delete) if the authenticated user's ID matches the userId.
     * @deny (create, get, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reviewSessions/{reviewSessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}